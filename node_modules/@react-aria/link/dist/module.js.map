{"mappings":";;;;AAAA;;;;;;;;;;ACAA;;;;;;;;;;CAUC;;;AA+BM,SAAS,0CAAQ,KAAsB,EAAE,GAAgC;IAC9E,IAAI,eACF,cAAc,cACd,OAAO,gBACP,YAAY,cACZ,UAAU,EACV,aAAa;IACb,SAAS,iBAAiB,cAC1B,UAAU,EACV,GAAG,YACJ,GAAG;IAEJ,IAAI,YAA2B,CAAC;IAChC,IAAI,gBAAgB,KAClB,YAAY;QACV,MAAM;QACN,UAAU,CAAC,aAAa,IAAI;IAC9B;IAEF,IAAI,kBAAC,cAAc,EAAC,GAAG,CAAA,GAAA,mBAAW,EAAE,OAAO;IAC3C,IAAI,cAAC,UAAU,aAAE,SAAS,EAAC,GAAG,CAAA,GAAA,eAAO,EAAE;iBAAC;sBAAS;oBAAc;oBAAY;aAAY;IAAG;IAC1F,IAAI,WAAW,CAAA,GAAA,qBAAa,EAAE,YAAY;QAAC,WAAW;QAAM,QAAQ,gBAAgB;IAAG;IACvF,IAAI,sBAAsB,CAAA,GAAA,iBAAS,EAAE,gBAAgB;IACrD,IAAI,SAAS,CAAA,GAAA,gBAAQ;IAErB,OAAO;mBACL;QACA,WAAW,CAAA,GAAA,iBAAS,EAAE,UAAU;YAC9B,GAAG,mBAAmB;YACtB,GAAG,SAAS;YACZ,iBAAiB,cAAc;YAC/B,gBAAgB,KAAK,CAAC,eAAe;YACrC,SAAS,CAAC;oBACR;iBAAA,sBAAA,WAAW,OAAO,cAAlB,0CAAA,yBAAA,YAAqB;gBACrB,IAAI,mBAAmB;oBACrB,kBAAkB;oBAClB,QAAQ,IAAI,CAAC;gBACf;gBAEA,mGAAmG;gBACnG,IACE,CAAC,OAAO,QAAQ,IAChB,EAAE,aAAa,YAAY,qBAC3B,EAAE,aAAa,CAAC,IAAI,IACpB,0FAA0F;gBAC1F,CAAC,EAAE,kBAAkB,MACrB,CAAA,GAAA,2BAAmB,EAAE,EAAE,aAAa,EAAE,IACtC;oBACA,EAAE,cAAc;oBAChB,OAAO,IAAI,CAAC,EAAE,aAAa,EAAE;gBAC/B;YACF;QACF;IACF;AACF;;CDrFC","sources":["packages/@react-aria/link/src/index.ts","packages/@react-aria/link/src/useLink.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport type {AriaLinkOptions, LinkAria} from './useLink';\nexport {useLink} from './useLink';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLinkProps} from '@react-types/link';\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, shouldClientNavigate, useRouter} from '@react-aria/utils';\nimport React, {RefObject} from 'react';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface AriaLinkOptions extends AriaLinkProps {\n  /** Whether the link is disabled. */\n  isDisabled?: boolean,\n  /**\n   * The HTML element used to render the link, e.g. 'a', or 'span'.\n   * @default 'a'\n   */\n  elementType?: string\n}\n\nexport interface LinkAria {\n  /** Props for the link element. */\n  linkProps: DOMAttributes,\n  /** Whether the link is currently pressed. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a link component.\n * A link allows a user to navigate to another page or resource within a web page\n * or application.\n */\nexport function useLink(props: AriaLinkOptions, ref: RefObject<FocusableElement>): LinkAria {\n  let {\n    elementType = 'a',\n    onPress,\n    onPressStart,\n    onPressEnd,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    isDisabled,\n    ...otherProps\n  } = props;\n\n  let linkProps: DOMAttributes = {};\n  if (elementType !== 'a') {\n    linkProps = {\n      role: 'link',\n      tabIndex: !isDisabled ? 0 : undefined\n    };\n  }\n  let {focusableProps} = useFocusable(props, ref);\n  let {pressProps, isPressed} = usePress({onPress, onPressStart, onPressEnd, isDisabled, ref});\n  let domProps = filterDOMProps(otherProps, {labelable: true, isLink: elementType === 'a'});\n  let interactionHandlers = mergeProps(focusableProps, pressProps);\n  let router = useRouter();\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    linkProps: mergeProps(domProps, {\n      ...interactionHandlers,\n      ...linkProps,\n      'aria-disabled': isDisabled || undefined,\n      'aria-current': props['aria-current'],\n      onClick: (e: React.MouseEvent<HTMLAnchorElement>) => {\n        pressProps.onClick?.(e);\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n\n        // If a custom router is provided, prevent default and forward if this link should client navigate.\n        if (\n          !router.isNative &&\n          e.currentTarget instanceof HTMLAnchorElement &&\n          e.currentTarget.href &&\n          // If props are applied to a router Link component, it may have already prevented default.\n          !e.isDefaultPrevented() &&\n          shouldClientNavigate(e.currentTarget, e)\n        ) {\n          e.preventDefault();\n          router.open(e.currentTarget, e);\n        }\n      }\n    })\n  };\n}\n"],"names":[],"version":3,"file":"module.js.map"}