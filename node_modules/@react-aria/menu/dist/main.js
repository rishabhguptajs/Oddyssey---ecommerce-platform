var $429891642bf97c51$exports = require("./ar-AE.main.js");
var $40d90b799072e111$exports = require("./bg-BG.main.js");
var $587b89d60e4f3e24$exports = require("./cs-CZ.main.js");
var $79eb8045886465e9$exports = require("./da-DK.main.js");
var $9c6faa2088d34bf1$exports = require("./de-DE.main.js");
var $ee6e1292c61a8135$exports = require("./el-GR.main.js");
var $f479187898d153cc$exports = require("./en-US.main.js");
var $1e6a91f77efbb11f$exports = require("./es-ES.main.js");
var $f2fb75e964082636$exports = require("./et-EE.main.js");
var $75cc65c4b616fac1$exports = require("./fi-FI.main.js");
var $82a179939aabd1ee$exports = require("./fr-FR.main.js");
var $40aa37345f1f8748$exports = require("./he-IL.main.js");
var $c00088e5c377e2c5$exports = require("./hr-HR.main.js");
var $51f736a409b7d295$exports = require("./hu-HU.main.js");
var $65bb74747bd8f2fb$exports = require("./it-IT.main.js");
var $1bc11da108727c27$exports = require("./ja-JP.main.js");
var $118d77e4be898c17$exports = require("./ko-KR.main.js");
var $4db9ebadbf792309$exports = require("./lt-LT.main.js");
var $51288b53bc93ac3d$exports = require("./lv-LV.main.js");
var $1a4b31206cd66e98$exports = require("./nb-NO.main.js");
var $21e944c6af0b8453$exports = require("./nl-NL.main.js");
var $20509ccafe6fe6aa$exports = require("./pl-PL.main.js");
var $8006eac1d5d4665b$exports = require("./pt-BR.main.js");
var $4875d1b529941a0a$exports = require("./pt-PT.main.js");
var $37939d04a40a865b$exports = require("./ro-RO.main.js");
var $fd1c8a4521d30c69$exports = require("./ru-RU.main.js");
var $2940d0a4ba6cbd64$exports = require("./sk-SK.main.js");
var $cb481a56d5c8fa56$exports = require("./sl-SI.main.js");
var $ecbdeaa2c85d1b32$exports = require("./sr-SP.main.js");
var $aeca4735c8d1bab6$exports = require("./sv-SE.main.js");
var $68243426be5c9f01$exports = require("./tr-TR.main.js");
var $bde63de8df74e87d$exports = require("./uk-UA.main.js");
var $2d16ab23cbf254d4$exports = require("./zh-CN.main.js");
var $bd9ff3a1da9d944a$exports = require("./zh-TW.main.js");
var $fHYTQ$reactariautils = require("@react-aria/utils");
var $fHYTQ$reactariai18n = require("@react-aria/i18n");
var $fHYTQ$reactariainteractions = require("@react-aria/interactions");
var $fHYTQ$reactariaoverlays = require("@react-aria/overlays");
var $fHYTQ$reactariaselection = require("@react-aria/selection");
var $fHYTQ$reactstatelycollections = require("@react-stately/collections");
var $fHYTQ$react = require("react");


function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

$parcel$export(module.exports, "useMenuTrigger", () => $7211ab9328763fb9$export$dc9c12ed27dd1b49);
$parcel$export(module.exports, "useMenu", () => $a3815f0132802737$export$38eaa17faae8f579);
$parcel$export(module.exports, "useMenuItem", () => $38191ed02615ec07$export$9d32628fc2aea7da);
$parcel$export(module.exports, "useMenuSection", () => $63008655e23408c5$export$73f7a44322579622);
$parcel$export(module.exports, "UNSTABLE_useSubmenuTrigger", () => $5f4753043c9f6cdf$export$3819f8ee9f4ce664);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ var $d1742ec2644a0949$exports = {};


































$d1742ec2644a0949$exports = {
    "ar-AE": $429891642bf97c51$exports,
    "bg-BG": $40d90b799072e111$exports,
    "cs-CZ": $587b89d60e4f3e24$exports,
    "da-DK": $79eb8045886465e9$exports,
    "de-DE": $9c6faa2088d34bf1$exports,
    "el-GR": $ee6e1292c61a8135$exports,
    "en-US": $f479187898d153cc$exports,
    "es-ES": $1e6a91f77efbb11f$exports,
    "et-EE": $f2fb75e964082636$exports,
    "fi-FI": $75cc65c4b616fac1$exports,
    "fr-FR": $82a179939aabd1ee$exports,
    "he-IL": $40aa37345f1f8748$exports,
    "hr-HR": $c00088e5c377e2c5$exports,
    "hu-HU": $51f736a409b7d295$exports,
    "it-IT": $65bb74747bd8f2fb$exports,
    "ja-JP": $1bc11da108727c27$exports,
    "ko-KR": $118d77e4be898c17$exports,
    "lt-LT": $4db9ebadbf792309$exports,
    "lv-LV": $51288b53bc93ac3d$exports,
    "nb-NO": $1a4b31206cd66e98$exports,
    "nl-NL": $21e944c6af0b8453$exports,
    "pl-PL": $20509ccafe6fe6aa$exports,
    "pt-BR": $8006eac1d5d4665b$exports,
    "pt-PT": $4875d1b529941a0a$exports,
    "ro-RO": $37939d04a40a865b$exports,
    "ru-RU": $fd1c8a4521d30c69$exports,
    "sk-SK": $2940d0a4ba6cbd64$exports,
    "sl-SI": $cb481a56d5c8fa56$exports,
    "sr-SP": $ecbdeaa2c85d1b32$exports,
    "sv-SE": $aeca4735c8d1bab6$exports,
    "tr-TR": $68243426be5c9f01$exports,
    "uk-UA": $bde63de8df74e87d$exports,
    "zh-CN": $2d16ab23cbf254d4$exports,
    "zh-TW": $bd9ff3a1da9d944a$exports
};






function $7211ab9328763fb9$export$dc9c12ed27dd1b49(props, state, ref) {
    let { type: type = "menu", isDisabled: isDisabled, trigger: trigger = "press" } = props;
    let menuTriggerId = (0, $fHYTQ$reactariautils.useId)();
    let { triggerProps: triggerProps, overlayProps: overlayProps } = (0, $fHYTQ$reactariaoverlays.useOverlayTrigger)({
        type: type
    }, state, ref);
    let onKeyDown = (e)=>{
        if (isDisabled) return;
        if (trigger === "longPress" && !e.altKey) return;
        if (ref && ref.current) switch(e.key){
            case "Enter":
            case " ":
                if (trigger === "longPress") return;
            // fallthrough
            case "ArrowDown":
                // Stop propagation, unless it would already be handled by useKeyboard.
                if (!("continuePropagation" in e)) e.stopPropagation();
                e.preventDefault();
                state.toggle("first");
                break;
            case "ArrowUp":
                if (!("continuePropagation" in e)) e.stopPropagation();
                e.preventDefault();
                state.toggle("last");
                break;
            default:
                // Allow other keys.
                if ("continuePropagation" in e) e.continuePropagation();
        }
    };
    let stringFormatter = (0, $fHYTQ$reactariai18n.useLocalizedStringFormatter)((0, (/*@__PURE__*/$parcel$interopDefault($d1742ec2644a0949$exports))), "@react-aria/menu");
    let { longPressProps: longPressProps } = (0, $fHYTQ$reactariainteractions.useLongPress)({
        isDisabled: isDisabled || trigger !== "longPress",
        accessibilityDescription: stringFormatter.format("longPressMessage"),
        onLongPressStart () {
            state.close();
        },
        onLongPress () {
            state.open("first");
        }
    });
    let pressProps = {
        onPressStart (e) {
            // For consistency with native, open the menu on mouse/key down, but touch up.
            if (e.pointerType !== "touch" && e.pointerType !== "keyboard" && !isDisabled) // If opened with a screen reader, auto focus the first item.
            // Otherwise, the menu itself will be focused.
            state.toggle(e.pointerType === "virtual" ? "first" : null);
        },
        onPress (e) {
            if (e.pointerType === "touch" && !isDisabled) state.toggle();
        }
    };
    // omit onPress from triggerProps since we override it above.
    delete triggerProps.onPress;
    return {
        menuTriggerProps: {
            ...triggerProps,
            ...trigger === "press" ? pressProps : longPressProps,
            id: menuTriggerId,
            onKeyDown: onKeyDown
        },
        menuProps: {
            ...overlayProps,
            "aria-labelledby": menuTriggerId,
            autoFocus: state.focusStrategy || true,
            onClose: state.close
        }
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $a3815f0132802737$export$6f49b4016bfc8d56 = new WeakMap();
function $a3815f0132802737$export$38eaa17faae8f579(props, state, ref) {
    let { shouldFocusWrap: shouldFocusWrap = true, onKeyDown: onKeyDown, onKeyUp: onKeyUp, ...otherProps } = props;
    if (!props["aria-label"] && !props["aria-labelledby"]) console.warn("An aria-label or aria-labelledby prop is required for accessibility.");
    let domProps = (0, $fHYTQ$reactariautils.filterDOMProps)(props, {
        labelable: true
    });
    let { listProps: listProps } = (0, $fHYTQ$reactariaselection.useSelectableList)({
        ...otherProps,
        ref: ref,
        selectionManager: state.selectionManager,
        collection: state.collection,
        disabledKeys: state.disabledKeys,
        shouldFocusWrap: shouldFocusWrap,
        linkBehavior: "override"
    });
    $a3815f0132802737$export$6f49b4016bfc8d56.set(state, {
        onClose: props.onClose,
        onAction: props.onAction
    });
    return {
        menuProps: (0, $fHYTQ$reactariautils.mergeProps)(domProps, {
            onKeyDown: onKeyDown,
            onKeyUp: onKeyUp
        }, {
            role: "menu",
            ...listProps,
            onKeyDown: (e)=>{
                // don't clear the menu selected keys if the user is presses escape since escape closes the menu
                if (e.key !== "Escape") listProps.onKeyDown(e);
            }
        })
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $38191ed02615ec07$export$9d32628fc2aea7da(props, state, ref) {
    var _item_props;
    let { key: key, closeOnSelect: closeOnSelect, isVirtualized: isVirtualized, "aria-haspopup": hasPopup, onPressStart: pressStartProp, onPressUp: pressUpProp, onPress: onPress, onPressChange: onPressChange, onPressEnd: onPressEnd, onHoverStart: hoverStartProp, onHoverChange: onHoverChange, onHoverEnd: onHoverEnd, onKeyDown: onKeyDown, onKeyUp: onKeyUp, onFocus: onFocus, onFocusChange: onFocusChange, onBlur: onBlur } = props;
    let isTrigger = !!hasPopup;
    var _props_isDisabled;
    let isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : state.disabledKeys.has(key);
    var _props_isSelected;
    let isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : state.selectionManager.isSelected(key);
    let data = (0, $a3815f0132802737$export$6f49b4016bfc8d56).get(state);
    let onClose = props.onClose || data.onClose;
    let onAction = isTrigger ? ()=>{} : props.onAction || data.onAction;
    let router = (0, $fHYTQ$reactariautils.useRouter)();
    let performAction = (e)=>{
        if (onAction) onAction(key);
        if (e.target instanceof HTMLAnchorElement) router.open(e.target, e);
    };
    let role = "menuitem";
    if (!isTrigger) {
        if (state.selectionManager.selectionMode === "single") role = "menuitemradio";
        else if (state.selectionManager.selectionMode === "multiple") role = "menuitemcheckbox";
    }
    let labelId = (0, $fHYTQ$reactariautils.useSlotId)();
    let descriptionId = (0, $fHYTQ$reactariautils.useSlotId)();
    let keyboardId = (0, $fHYTQ$reactariautils.useSlotId)();
    let ariaProps = {
        "aria-disabled": isDisabled || undefined,
        role: role,
        "aria-label": props["aria-label"],
        "aria-labelledby": labelId,
        "aria-describedby": [
            descriptionId,
            keyboardId
        ].filter(Boolean).join(" ") || undefined,
        "aria-controls": props["aria-controls"],
        "aria-haspopup": hasPopup,
        "aria-expanded": props["aria-expanded"]
    };
    if (state.selectionManager.selectionMode !== "none" && !isTrigger) ariaProps["aria-checked"] = isSelected;
    let item = state.collection.getItem(key);
    if (isVirtualized) {
        ariaProps["aria-posinset"] = item === null || item === void 0 ? void 0 : item.index;
        ariaProps["aria-setsize"] = (0, $fHYTQ$reactstatelycollections.getItemCount)(state.collection);
    }
    let onPressStart = (e)=>{
        if (e.pointerType === "keyboard") performAction(e);
        pressStartProp === null || pressStartProp === void 0 ? void 0 : pressStartProp(e);
    };
    let onPressUp = (e)=>{
        if (e.pointerType !== "keyboard") {
            performAction(e);
            // Pressing a menu item should close by default in single selection mode but not multiple
            // selection mode, except if overridden by the closeOnSelect prop.
            if (!isTrigger && onClose && (closeOnSelect !== null && closeOnSelect !== void 0 ? closeOnSelect : state.selectionManager.selectionMode !== "multiple" || state.selectionManager.isLink(key))) onClose();
        }
        pressUpProp === null || pressUpProp === void 0 ? void 0 : pressUpProp(e);
    };
    let { itemProps: itemProps, isFocused: isFocused } = (0, $fHYTQ$reactariaselection.useSelectableItem)({
        selectionManager: state.selectionManager,
        key: key,
        ref: ref,
        shouldSelectOnPressUp: true,
        allowsDifferentPressOrigin: true,
        // Disable all handling of links in useSelectable item
        // because we handle it ourselves. The behavior of menus
        // is slightly different from other collections because
        // actions are performed on key down rather than key up.
        linkBehavior: "none"
    });
    let { pressProps: pressProps, isPressed: isPressed } = (0, $fHYTQ$reactariainteractions.usePress)({
        onPressStart: onPressStart,
        onPress: onPress,
        onPressUp: onPressUp,
        onPressChange: onPressChange,
        onPressEnd: onPressEnd,
        isDisabled: isDisabled
    });
    let { hoverProps: hoverProps } = (0, $fHYTQ$reactariainteractions.useHover)({
        isDisabled: isDisabled,
        onHoverStart (e) {
            if (!(0, $fHYTQ$reactariainteractions.isFocusVisible)()) {
                state.selectionManager.setFocused(true);
                state.selectionManager.setFocusedKey(key);
            }
            hoverStartProp === null || hoverStartProp === void 0 ? void 0 : hoverStartProp(e);
        },
        onHoverChange: onHoverChange,
        onHoverEnd: onHoverEnd
    });
    let { keyboardProps: keyboardProps } = (0, $fHYTQ$reactariainteractions.useKeyboard)({
        onKeyDown: (e)=>{
            // Ignore repeating events, which may have started on the menu trigger before moving
            // focus to the menu item. We want to wait for a second complete key press sequence.
            if (e.repeat) {
                e.continuePropagation();
                return;
            }
            switch(e.key){
                case " ":
                    if (!isDisabled && state.selectionManager.selectionMode === "none" && !isTrigger && closeOnSelect !== false && onClose) onClose();
                    break;
                case "Enter":
                    // The Enter key should always close on select, except if overridden.
                    if (!isDisabled && closeOnSelect !== false && !isTrigger && onClose) onClose();
                    break;
                default:
                    if (!isTrigger) e.continuePropagation();
                    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
                    break;
            }
        },
        onKeyUp: onKeyUp
    });
    let { focusProps: focusProps } = (0, $fHYTQ$reactariainteractions.useFocus)({
        onBlur: onBlur,
        onFocus: onFocus,
        onFocusChange: onFocusChange
    });
    let domProps = (0, $fHYTQ$reactariautils.filterDOMProps)(item.props, {
        isLink: !!(item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.href)
    });
    delete domProps.id;
    return {
        menuItemProps: {
            ...ariaProps,
            ...(0, $fHYTQ$reactariautils.mergeProps)(domProps, isTrigger ? {
                onFocus: itemProps.onFocus
            } : itemProps, pressProps, hoverProps, keyboardProps, focusProps),
            tabIndex: itemProps.tabIndex != null ? -1 : undefined
        },
        labelProps: {
            id: labelId
        },
        descriptionProps: {
            id: descriptionId
        },
        keyboardShortcutProps: {
            id: keyboardId
        },
        isFocused: isFocused,
        isSelected: isSelected,
        isPressed: isPressed,
        isDisabled: isDisabled
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $63008655e23408c5$export$73f7a44322579622(props) {
    let { heading: heading, "aria-label": ariaLabel } = props;
    let headingId = (0, $fHYTQ$reactariautils.useId)();
    return {
        itemProps: {
            role: "presentation"
        },
        headingProps: heading ? {
            // Techincally, menus cannot contain headings according to ARIA.
            // We hide the heading from assistive technology, using role="presentation",
            // and only use it as a label for the nested group.
            id: headingId,
            role: "presentation"
        } : {},
        groupProps: {
            role: "group",
            "aria-label": ariaLabel,
            "aria-labelledby": heading ? headingId : undefined
        }
    };
}


/*
 * Copyright 2023 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





const $62347d8c4183e713$var$ALLOWED_INVALID_MOVEMENTS = 2;
const $62347d8c4183e713$var$THROTTLE_TIME = 50;
const $62347d8c4183e713$var$TIMEOUT_TIME = 1000;
const $62347d8c4183e713$var$ANGLE_PADDING = Math.PI / 12; // 15°
function $62347d8c4183e713$export$85ec83e04c95f50a(options) {
    let { menuRef: menuRef, submenuRef: submenuRef, isOpen: isOpen, isDisabled: isDisabled } = options;
    let prevPointerPos = (0, $fHYTQ$react.useRef)();
    let submenuRect = (0, $fHYTQ$react.useRef)();
    let lastProcessedTime = (0, $fHYTQ$react.useRef)(0);
    let timeout = (0, $fHYTQ$react.useRef)();
    let autoCloseTimeout = (0, $fHYTQ$react.useRef)();
    let submenuSide = (0, $fHYTQ$react.useRef)();
    let movementsTowardsSubmenuCount = (0, $fHYTQ$react.useRef)(2);
    let [preventPointerEvents, setPreventPointerEvents] = (0, $fHYTQ$react.useState)(false);
    let updateSubmenuRect = ()=>{
        if (submenuRef.current) {
            submenuRect.current = submenuRef.current.getBoundingClientRect();
            submenuSide.current = undefined;
        }
    };
    (0, $fHYTQ$reactariautils.useResizeObserver)({
        ref: submenuRef,
        onResize: updateSubmenuRect
    });
    let reset = ()=>{
        setPreventPointerEvents(false);
        movementsTowardsSubmenuCount.current = $62347d8c4183e713$var$ALLOWED_INVALID_MOVEMENTS;
    };
    let modality = (0, $fHYTQ$reactariainteractions.useInteractionModality)();
    (0, $fHYTQ$react.useEffect)(()=>{
        if (preventPointerEvents && menuRef.current) menuRef.current.style.pointerEvents = "none";
        else menuRef.current.style.pointerEvents = "";
    }, [
        menuRef,
        preventPointerEvents
    ]);
    (0, $fHYTQ$react.useEffect)(()=>{
        let submenu = submenuRef.current;
        let menu = menuRef.current;
        if (isDisabled || !submenu || !isOpen || modality !== "pointer") {
            reset();
            return;
        }
        submenuRect.current = submenu.getBoundingClientRect();
        let onPointerMove = (e)=>{
            if (e.pointerType === "touch" || e.pointerType === "pen") return;
            let currentTime = Date.now();
            // Throttle
            if (currentTime - lastProcessedTime.current < $62347d8c4183e713$var$THROTTLE_TIME) return;
            clearTimeout(timeout.current);
            clearTimeout(autoCloseTimeout.current);
            let { clientX: mouseX, clientY: mouseY } = e;
            if (!prevPointerPos.current) {
                prevPointerPos.current = {
                    x: mouseX,
                    y: mouseY
                };
                return;
            }
            if (!submenuRect.current) return;
            if (!submenuSide.current) submenuSide.current = mouseX > submenuRect.current.right ? "left" : "right";
            // Pointer is outside of parent menu
            if (mouseX < menu.getBoundingClientRect().left || mouseX > menu.getBoundingClientRect().right || mouseY < menu.getBoundingClientRect().top || mouseY > menu.getBoundingClientRect().bottom) {
                reset();
                return;
            }
            /* Check if pointer is moving towards submenu.
        Uses the 2-argument arctangent (https://en.wikipedia.org/wiki/Atan2) to calculate:
          - angle between previous pointer and top of submenu
          - angle between previous pointer and bottom of submenu
          - angle between previous pointer and current pointer (delta)
        If the pointer delta angle value is between the top and bottom angle values, we know the pointer is moving towards the submenu.
      */ let prevMouseX = prevPointerPos.current.x;
            let prevMouseY = prevPointerPos.current.y;
            let toSubmenuX = submenuSide.current === "right" ? submenuRect.current.left - prevMouseX : prevMouseX - submenuRect.current.right;
            let angleTop = Math.atan2(prevMouseY - submenuRect.current.top, toSubmenuX) + $62347d8c4183e713$var$ANGLE_PADDING;
            let angleBottom = Math.atan2(prevMouseY - submenuRect.current.bottom, toSubmenuX) - $62347d8c4183e713$var$ANGLE_PADDING;
            let anglePointer = Math.atan2(prevMouseY - mouseY, submenuSide.current === "left" ? -(mouseX - prevMouseX) : mouseX - prevMouseX);
            let isMovingTowardsSubmenu = anglePointer < angleTop && anglePointer > angleBottom;
            movementsTowardsSubmenuCount.current = isMovingTowardsSubmenu ? Math.min(movementsTowardsSubmenuCount.current + 1, $62347d8c4183e713$var$ALLOWED_INVALID_MOVEMENTS) : Math.max(movementsTowardsSubmenuCount.current - 1, 0);
            if (movementsTowardsSubmenuCount.current >= $62347d8c4183e713$var$ALLOWED_INVALID_MOVEMENTS) setPreventPointerEvents(true);
            else setPreventPointerEvents(false);
            lastProcessedTime.current = currentTime;
            prevPointerPos.current = {
                x: mouseX,
                y: mouseY
            };
            // If the pointer is moving towards the submenu, start a timeout to close if no other movements are made after 500ms.
            if (isMovingTowardsSubmenu) timeout.current = setTimeout(()=>{
                reset();
                autoCloseTimeout.current = setTimeout(()=>{
                    // Fire a pointerover event to trigger the menu to close.
                    // Wait until pointer-events:none is no longer applied
                    let target = document.elementFromPoint(mouseX, mouseY);
                    if (target && menu.contains(target)) target.dispatchEvent(new PointerEvent("pointerover", {
                        bubbles: true,
                        cancelable: true
                    }));
                }, 100);
            }, $62347d8c4183e713$var$TIMEOUT_TIME);
        };
        window.addEventListener("pointermove", onPointerMove);
        return ()=>{
            window.removeEventListener("pointermove", onPointerMove);
            clearTimeout(timeout.current);
            clearTimeout(autoCloseTimeout.current);
            movementsTowardsSubmenuCount.current = $62347d8c4183e713$var$ALLOWED_INVALID_MOVEMENTS;
        };
    }, [
        isDisabled,
        isOpen,
        menuRef,
        modality,
        setPreventPointerEvents,
        submenuRef
    ]);
}


function $5f4753043c9f6cdf$export$3819f8ee9f4ce664(props, state, ref) {
    let { parentMenuRef: parentMenuRef, submenuRef: submenuRef, type: type = "menu", isDisabled: isDisabled, node: node } = props;
    let submenuTriggerId = (0, $fHYTQ$reactariautils.useId)();
    let overlayId = (0, $fHYTQ$reactariautils.useId)();
    let { direction: direction } = (0, $fHYTQ$reactariai18n.useLocale)();
    let openTimeout = (0, $fHYTQ$react.useRef)();
    let cancelOpenTimeout = (0, $fHYTQ$react.useCallback)(()=>{
        if (openTimeout.current) {
            clearTimeout(openTimeout.current);
            openTimeout.current = undefined;
        }
    }, [
        openTimeout
    ]);
    let onSubmenuOpen = (0, $fHYTQ$reactariautils.useEffectEvent)((focusStrategy)=>{
        cancelOpenTimeout();
        state.open(focusStrategy);
    });
    let onSubmenuClose = (0, $fHYTQ$reactariautils.useEffectEvent)(()=>{
        cancelOpenTimeout();
        state.close();
    });
    (0, $fHYTQ$reactariautils.useLayoutEffect)(()=>{
        return ()=>{
            cancelOpenTimeout();
        };
    }, [
        cancelOpenTimeout
    ]);
    let submenuKeyDown = (e)=>{
        switch(e.key){
            case "ArrowLeft":
                if (direction === "ltr" && e.currentTarget.contains(e.target)) {
                    e.stopPropagation();
                    onSubmenuClose();
                    ref.current.focus();
                }
                break;
            case "ArrowRight":
                if (direction === "rtl" && e.currentTarget.contains(e.target)) {
                    e.stopPropagation();
                    onSubmenuClose();
                    ref.current.focus();
                }
                break;
            case "Escape":
                e.stopPropagation();
                state.closeAll();
                break;
        }
    };
    let submenuProps = {
        id: overlayId,
        "aria-label": node.textValue,
        submenuLevel: state.submenuLevel,
        ...type === "menu" && {
            onClose: state.closeAll,
            autoFocus: state.focusStrategy,
            onKeyDown: submenuKeyDown
        }
    };
    let submenuTriggerKeyDown = (e)=>{
        switch(e.key){
            case "ArrowRight":
                if (!isDisabled) {
                    if (direction === "ltr") {
                        if (!state.isOpen) onSubmenuOpen("first");
                        if (type === "menu" && !!(submenuRef === null || submenuRef === void 0 ? void 0 : submenuRef.current) && document.activeElement === (ref === null || ref === void 0 ? void 0 : ref.current)) submenuRef.current.focus();
                    } else if (state.isOpen) onSubmenuClose();
                    else e.continuePropagation();
                }
                break;
            case "ArrowLeft":
                if (!isDisabled) {
                    if (direction === "rtl") {
                        if (!state.isOpen) onSubmenuOpen("first");
                        if (type === "menu" && !!(submenuRef === null || submenuRef === void 0 ? void 0 : submenuRef.current) && document.activeElement === (ref === null || ref === void 0 ? void 0 : ref.current)) submenuRef.current.focus();
                    } else if (state.isOpen) onSubmenuClose();
                    else e.continuePropagation();
                }
                break;
            case "Escape":
                state.closeAll();
                break;
            default:
                e.continuePropagation();
                break;
        }
    };
    let onPressStart = (e)=>{
        if (!isDisabled && (e.pointerType === "virtual" || e.pointerType === "keyboard")) // If opened with a screen reader or keyboard, auto focus the first submenu item.
        onSubmenuOpen("first");
    };
    let onPress = (e)=>{
        if (!isDisabled && (e.pointerType === "touch" || e.pointerType === "mouse")) // For touch or on a desktop device with a small screen open on press up to possible problems with
        // press up happening on the newly opened tray items
        onSubmenuOpen();
    };
    let onHoverChange = (isHovered)=>{
        if (!isDisabled) {
            if (isHovered && !state.isOpen) {
                if (!openTimeout.current) openTimeout.current = setTimeout(()=>{
                    onSubmenuOpen();
                }, 200);
            } else if (!isHovered) cancelOpenTimeout();
        }
    };
    let onBlur = (e)=>{
        if (state.isOpen && parentMenuRef.current.contains(e.relatedTarget)) onSubmenuClose();
    };
    let shouldCloseOnInteractOutside = (target)=>{
        if (target !== ref.current) return true;
        return false;
    };
    (0, $62347d8c4183e713$export$85ec83e04c95f50a)({
        menuRef: parentMenuRef,
        submenuRef: submenuRef,
        isOpen: state.isOpen,
        isDisabled: isDisabled
    });
    return {
        submenuTriggerProps: {
            id: submenuTriggerId,
            "aria-controls": state.isOpen ? overlayId : undefined,
            "aria-haspopup": !isDisabled ? type : undefined,
            "aria-expanded": state.isOpen ? "true" : "false",
            onPressStart: onPressStart,
            onPress: onPress,
            onHoverChange: onHoverChange,
            onKeyDown: submenuTriggerKeyDown,
            onBlur: onBlur,
            isOpen: state.isOpen
        },
        submenuProps: submenuProps,
        popoverProps: {
            isNonModal: true,
            disableFocusManagement: true,
            shouldCloseOnInteractOutside: shouldCloseOnInteractOutside
        }
    };
}




//# sourceMappingURL=main.js.map
